# Welcome to Serverless!
#
#
# For full config options, check the docs:
#    docs.serverless.com


service: voter-app
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1

plugins:
  - serverless-s3-sync
  - serverless-cloudfront-invalidate

custom:
  ResourceGroupTag: ${self:service}-${self:provider.stage}
  s3BucketName: ${self:service}-${self:provider.stage}-react-bucket
  s3Sync:
    - bucketName: ${self:custom.s3BucketName}
      localDir: build/
      deleteRemoved: true
      params: # optional
        - index.html:
            CacheControl: 'no-cache'
        - "*.js":
            CacheControl: 'public, max-age=31536000'
  cloudfrontInvalidate:
    - distributionIdKey: CloudFrontDistributionId
      autoInvalidate: true
      items:
        - '/*'

resources:
  # S3
  Resources:
    ResourceGroup:
      Type: AWS::ResourceGroups::Group
      Properties:
        Name: ${self:custom.ResourceGroupTag}
        ResourceQuery:
          Type: "TAG_FILTERS_1_0"
          Query:
            TagFilters:
              - Key: service
                Values:
                  - ${self:custom.ResourceGroupTag}
    Website:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        Tags:
          - Key: service
            Value: ${self:custom.ResourceGroupTag}
    S3AccessPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: Website
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3BucketName}/*
    # CloudFront
    Distribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3BucketName}.s3.amazonaws.com
              Id: ReactApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: 'true'
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: ReactApp
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
        Tags:
          - Key: service
            Value: ${self:custom.ResourceGroupTag}
  Outputs:
    CloudFrontDistributionId:
      Value:
        Ref: Distribution


package:
  patterns:
    - '!node_modules/**'
